void handleWebRequest()
{
	// listen for incoming clients
      EthernetClient client = server.available();
      for(int i=0;i<110;i++)page[i]=' '; //Char array/string
      if (client) {
      int count=0;
      int storeRequest=0;

      // an http request ends with a blank line
      boolean currentLineIsBlank = false;
      while (client.connected()) {
         if (client.available()) {
            char c = client.read();
            if(storeRequest==1)
               page[count++]=c; //Char array/string
            if(c=='/' && storeRequest!=2)
               storeRequest=1;
            if(c==' ' && storeRequest)
               storeRequest=2;
               
            // if you've gotten to the end of the line (received a newline
            // character) and the line is blank, the http request has ended,
            // so you can send a reply
            if (c == '\n' && currentLineIsBlank) {
               //Status
               if(page[0]==' ') //Char array/String
               {
                  MODE=AUTO_MODE;
                  // send a standard http response header
                  client.println("HTTP/1.1 200 OK");
                  client.println("Content-Type: text/html");
                  client.println("Connection: close"); // the connection will be closed after completion of the response
                  client.println();
                  //Send page to client
                  sendStatusPage(client);
               }
               
               //Manual
               else if(page[0]=='m') //Char array/String
               {
                  //New state set //The seemingly random indexes are the places where values will be present when data is sent through the correct format.
                  if(page[11]=='?') //Char array/String
                  {
                     for(int i=0;i<5;i++)value[i]=' '; //Char array/String
                     
                     //Set light on or off
                     value[0]=page[24]; //Char array/String
                     if(value[0]=='1') //Char array/String
                        L->on();
                     else
                        L->off();
                        
                     for(int i=0;i<5;i++)value[i]=' '; //Char array/String
                     
                     //Set brightness
                     value[0]=page[42];
                     if(value[0]=='0')
                        L->off();
                     else if(value[0]=='1')
                        L->dim(1);
                     else if(value[0]=='2')
                        L->dim(2);
                     else
                        L->dim(3);
                     
                     for(int i=0;i<5;i++)value[i]=' '; //Char array/String
                     
                     //Set fan state
                     value[0]=page[54];
                     if(value[0]=='1') //Char array/String
                        F1->on();
                     else
                        F1->off();
                     
                     for(int i=0;i<5;i++)value[i]=' '; //Char array/String
                     
                     //Set fan speed
                     value[0]=page[65];
                     if(value[0]=='0') //Char array/String
                        F1->off();
                     else if(value[0]=='1')
                        F1->regulate(1);
                     else if(value[0]=='2')
                        F1->regulate(2);
                     else 
                        F1->regulate(3);
                     
                     for(int i=0;i<5;i++)value[i]=' '; //Char array/String
                     
                     //Set AC
                     value[0]=page[76];
                     if(value[0]=='0') //Char array/String
                        AC1->off();
                     else
                     {
                        value[1]=page[92];   //Temperature
                        value[2]=page[93];   //Temperature
                        value[3]=page[103];
                        byte reqTemp=((byte)value[1]-48)*10 + ((byte)value[2]-48);
                        byte reqSpeed=(byte)value[3]-48;
                        AC1->set(reqTemp,reqSpeed);
                     }
                  }
                  MODE=MANUAL_MODE;
                  // send a standard http response header
                  client.println("HTTP/1.1 200 OK");
                  client.println("Content-Type: text/html");
                  client.println("Connection: close"); // the connection will be closed after completion of the response
                  client.println();
                  //Send page to client
                  sendManualPage(client);
               }
               break;
            }
            if (c == '\n') {
               // you're starting a new line
               currentLineIsBlank = true;
            }
            else if (c != '\r') {
               // you've gotten a character on the current line
               currentLineIsBlank = false;
            }
         }
      }
      // give the web browser time to receive the data
      delay(1);
      // close the connection:
      client.stop();
   }
}
